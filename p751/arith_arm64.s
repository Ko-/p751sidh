// +build arm64,!noasm

#include "textflag.h"

TEXT ·fp751ConditionalSwap(SB), NOSPLIT, $0-17
	MOVD	x+0(FP), R0
	MOVD	y+8(FP), R1
	MOVB	choice+16(FP), R2

	// Set flags
	// If choice is not 0 or 1, this implementation will swap completely
	CMP	$0, R2

	LDP	0(R0), (R3, R4)
	LDP	0(R1), (R5, R6)
	CSEL	EQ, R3, R5, R7
	CSEL	EQ, R4, R6, R8
	STP	(R7, R8), 0(R0)
	CSEL	NE, R3, R5, R9
	CSEL	NE, R4, R6, R10
	STP	(R9, R10), 0(R1)

	LDP	16(R0), (R3, R4)
	LDP	16(R1), (R5, R6)
	CSEL	EQ, R3, R5, R7
	CSEL	EQ, R4, R6, R8
	STP	(R7, R8), 16(R0)
	CSEL	NE, R3, R5, R9
	CSEL	NE, R4, R6, R10
	STP	(R9, R10), 16(R1)

	LDP	32(R0), (R3, R4)
	LDP	32(R1), (R5, R6)
	CSEL	EQ, R3, R5, R7
	CSEL	EQ, R4, R6, R8
	STP	(R7, R8), 32(R0)
	CSEL	NE, R3, R5, R9
	CSEL	NE, R4, R6, R10
	STP	(R9, R10), 32(R1)

	LDP	48(R0), (R3, R4)
	LDP	48(R1), (R5, R6)
	CSEL	EQ, R3, R5, R7
	CSEL	EQ, R4, R6, R8
	STP	(R7, R8), 48(R0)
	CSEL	NE, R3, R5, R9
	CSEL	NE, R4, R6, R10
	STP	(R9, R10), 48(R1)

	LDP	64(R0), (R3, R4)
	LDP	64(R1), (R5, R6)
	CSEL	EQ, R3, R5, R7
	CSEL	EQ, R4, R6, R8
	STP	(R7, R8), 64(R0)
	CSEL	NE, R3, R5, R9
	CSEL	NE, R4, R6, R10
	STP	(R9, R10), 64(R1)

	LDP	80(R0), (R3, R4)
	LDP	80(R1), (R5, R6)
	CSEL	EQ, R3, R5, R7
	CSEL	EQ, R4, R6, R8
	STP	(R7, R8), 80(R0)
	CSEL	NE, R3, R5, R9
	CSEL	NE, R4, R6, R10
	STP	(R9, R10), 80(R1)

	RET

TEXT ·fp751AddReduced(SB), NOSPLIT, $0-24
	MOVD	z+0(FP), R2
	MOVD	x+8(FP), R0
	MOVD	y+16(FP), R1

	// Load first summand into R3-R14
	// Add first summand and second summand and store result in R3-R14
	LDP	0(R0), (R3, R4)
	LDP	0(R1), (R15, R16)
	LDP	16(R0), (R5, R6)
	LDP	16(R1), (R17, R19)
	ADDS	R15, R3
	ADCS	R16, R4
	ADCS	R17, R5
	ADCS	R19, R6

	LDP	32(R0), (R7, R8)
	LDP	32(R1), (R15, R16)
	LDP	48(R0), (R9, R10)
	LDP	48(R1), (R17, R19)
	ADCS	R15, R7
	ADCS	R16, R8
	ADCS	R17, R9
	ADCS	R19, R10

	LDP	64(R0), (R11, R12)
	LDP	64(R1), (R15, R16)
	LDP	80(R0), (R13, R14)
	LDP	80(R1), (R17, R19)
	ADCS	R15, R11
	ADCS	R16, R12
	ADCS	R17, R13
	ADC	R19, R14

	// Subtract 2 * p751 in R15-R24 from the result in R3-R14
	LDP	·p751x2+0(SB), (R15, R16)
	SUBS	R15, R3
	SBCS	R16, R4
	LDP	·p751x2+40(SB), (R17, R19)
	SBCS	R16, R5
	SBCS	R16, R6
	SBCS	R16, R7
	LDP	·p751x2+56(SB), (R20, R21)
	SBCS	R17, R8
	SBCS	R19, R9
	LDP	·p751x2+72(SB), (R22, R23)
	SBCS	R20, R10
	SBCS	R21, R11
	MOVD	·p751x2+88(SB), R24
	SBCS	R22, R12
	SBCS	R23, R13
	SBCS	R24, R14
	SBC	ZR, ZR, R25

	// Add 2 * p751 back but anded with the mask in R25
	AND	R25, R15
	AND	R25, R16
	AND 	R25, R17
	AND	R25, R19
	AND	R25, R20
	AND	R25, R21
	AND 	R25, R22
	AND	R25, R23
	AND	R25, R24

	ADDS	R15, R3
	ADCS	R16, R4
	STP	(R3, R4), 0(R2)
	ADCS	R16, R5
	ADCS	R16, R6
	STP	(R5, R6), 16(R2)
	ADCS	R16, R7
	ADCS	R17, R8
	STP	(R7, R8), 32(R2)
	ADCS	R19, R9
	ADCS	R20, R10
	STP	(R9, R10), 48(R2)
	ADCS	R21, R11
	ADCS	R22, R12
	STP	(R11, R12), 64(R2)
	ADCS	R23, R13
	ADC	R24, R14
	STP	(R13, R14), 80(R2)

	RET

TEXT ·fp751SubReduced(SB), NOSPLIT, $0-24
	MOVD	z+0(FP), R2
	MOVD	x+8(FP), R0
	MOVD	y+16(FP), R1

	// Load x into R3-R14
	// Subtract y from x and store result in R3-R14
	LDP	0(R0), (R3, R4)
	LDP	0(R1), (R15, R16)
	LDP	16(R0), (R5, R6)
	LDP	16(R1), (R17, R19)
	SUBS	R15, R3
	SBCS	R16, R4
	SBCS	R17, R5
	SBCS	R19, R6

	LDP	32(R0), (R7, R8)
	LDP	32(R1), (R15, R16)
	LDP	48(R0), (R9, R10)
	LDP	48(R1), (R17, R19)
	SBCS	R15, R7
	SBCS	R16, R8
	SBCS	R17, R9
	SBCS	R19, R10

	LDP	64(R0), (R11, R12)
	LDP	64(R1), (R15, R16)
	LDP	80(R0), (R13, R14)
	LDP	80(R1), (R17, R19)
	SBCS	R15, R11
	SBCS	R16, R12
	SBCS	R17, R13
	SBCS	R19, R14
	SBC	ZR, ZR, R15

	// Add 2 * p751 back but anded with the mask in R15
	LDP	·p751x2+0(SB), (R16, R17)
	AND	R15, R16
	AND	R15, R17
	LDP	·p751x2+40(SB), (R19, R20)
	AND	R15, R19
	AND	R15, R20

	ADDS	R16, R3
	ADCS	R17, R4
	STP	(R3, R4), 0(R2)
	ADCS	R17, R5
	ADCS	R17, R6
	STP	(R5, R6), 16(R2)
	ADCS	R17, R7
	ADCS	R19, R8
	STP	(R7, R8), 32(R2)
	ADCS	R20, R9

	LDP	·p751x2+56(SB), (R16, R17)
	AND	R15, R16
	AND	R15, R17
	LDP	·p751x2+72(SB), (R19, R20)
	AND	R15, R19
	AND	R15, R20

	ADCS	R16, R10
	STP	(R9, R10), 48(R2)
	ADCS	R17, R11
	ADCS	R19, R12
	STP	(R11, R12), 64(R2)
	ADCS	R20, R13

	MOVD	·p751x2+88(SB), R16
	AND	R15, R16
	ADC	R16, R14
	STP	(R13, R14), 80(R2)

	RET

TEXT ·fp751AddLazy(SB), NOSPLIT, $0-24
	MOVD	z+0(FP), R2
	MOVD	x+8(FP), R0
	MOVD	y+16(FP), R1

	// Load first summand into R3-R14
	// Add first summand and second summand and store result in R3-R14
	LDP	0(R0), (R3, R4)
	LDP	0(R1), (R15, R16)
	LDP	16(R0), (R5, R6)
	LDP	16(R1), (R17, R19)
	ADDS	R15, R3
	ADCS	R16, R4
	STP	(R3, R4), 0(R2)
	ADCS	R17, R5
	ADCS	R19, R6
	STP	(R5, R6), 16(R2)

	LDP	32(R0), (R7, R8)
	LDP	32(R1), (R15, R16)
	LDP	48(R0), (R9, R10)
	LDP	48(R1), (R17, R19)
	ADCS	R15, R7
	ADCS	R16, R8
	STP	(R7, R8), 32(R2)
	ADCS	R17, R9
	ADCS	R19, R10
	STP	(R9, R10), 48(R2)

	LDP	64(R0), (R11, R12)
	LDP	64(R1), (R15, R16)
	LDP	80(R0), (R13, R14)
	LDP	80(R1), (R17, R19)
	ADCS	R15, R11
	ADCS	R16, R12
	STP	(R11, R12), 64(R2)
	ADCS	R17, R13
	ADC	R19, R14
	STP	(R13, R14), 80(R2)

	RET

TEXT ·fp751X2AddLazy(SB), NOSPLIT, $0-24
	MOVD	z+0(FP), R2
	MOVD	x+8(FP), R0
	MOVD	y+16(FP), R1

	LDP	0(R0), (R3, R4)
	LDP	0(R1), (R15, R16)
	LDP	16(R0), (R5, R6)
	LDP	16(R1), (R17, R19)
	ADDS	R15, R3
	ADCS	R16, R4
	STP	(R3, R4), 0(R2)
	ADCS	R17, R5
	ADCS	R19, R6
	STP	(R5, R6), 16(R2)

	LDP	32(R0), (R7, R8)
	LDP	32(R1), (R15, R16)
	LDP	48(R0), (R9, R10)
	LDP	48(R1), (R17, R19)
	ADCS	R15, R7
	ADCS	R16, R8
	STP	(R7, R8), 32(R2)
	ADCS	R17, R9
	ADCS	R19, R10
	STP	(R9, R10), 48(R2)

	LDP	64(R0), (R11, R12)
	LDP	64(R1), (R15, R16)
	LDP	80(R0), (R13, R14)
	LDP	80(R1), (R17, R19)
	ADCS	R15, R11
	ADCS	R16, R12
	STP	(R11, R12), 64(R2)
	ADCS	R17, R13
	ADCS	R19, R14
	STP	(R13, R14), 80(R2)

	LDP	96(R0), (R3, R4)
	LDP	96(R1), (R15, R16)
	LDP	112(R0), (R5, R6)
	LDP	112(R1), (R17, R19)
	ADCS	R15, R3
	ADCS	R16, R4
	STP	(R3, R4), 96(R2)
	ADCS	R17, R5
	ADCS	R19, R6
	STP	(R5, R6), 112(R2)

	LDP	128(R0), (R7, R8)
	LDP	128(R1), (R15, R16)
	LDP	144(R0), (R9, R10)
	LDP	144(R1), (R17, R19)
	ADCS	R15, R7
	ADCS	R16, R8
	STP	(R7, R8), 128(R2)
	ADCS	R17, R9
	ADCS	R19, R10
	STP	(R9, R10), 144(R2)

	LDP	160(R0), (R11, R12)
	LDP	160(R1), (R15, R16)
	LDP	176(R0), (R13, R14)
	LDP	176(R1), (R17, R19)
	ADCS	R15, R11
	ADCS	R16, R12
	STP	(R11, R12), 160(R2)
	ADCS	R17, R13
	ADC	R19, R14
	STP	(R13, R14), 176(R2)

	RET

TEXT ·fp751X2SubLazy(SB), NOSPLIT, $0-24
	MOVD	z+0(FP), R2
	MOVD	x+8(FP), R0
	MOVD	y+16(FP), R1

	LDP	0(R0), (R3, R4)
	LDP	0(R1), (R15, R16)
	LDP	16(R0), (R5, R6)
	LDP	16(R1), (R17, R19)
	SUBS	R15, R3
	SBCS	R16, R4
	STP	(R3, R4), 0(R2)
	SBCS	R17, R5
	SBCS	R19, R6
	STP	(R5, R6), 16(R2)

	LDP	32(R0), (R7, R8)
	LDP	32(R1), (R15, R16)
	LDP	48(R0), (R9, R10)
	LDP	48(R1), (R17, R19)
	SBCS	R15, R7
	SBCS	R16, R8
	STP	(R7, R8), 32(R2)
	SBCS	R17, R9
	SBCS	R19, R10
	STP	(R9, R10), 48(R2)

	LDP	64(R0), (R11, R12)
	LDP	64(R1), (R15, R16)
	LDP	80(R0), (R13, R14)
	LDP	80(R1), (R17, R19)
	SBCS	R15, R11
	SBCS	R16, R12
	STP	(R11, R12), 64(R2)
	SBCS	R17, R13
	SBCS	R19, R14
	STP	(R13, R14), 80(R2)

	LDP	96(R0), (R3, R4)
	LDP	96(R1), (R15, R16)
	LDP	112(R0), (R5, R6)
	LDP	112(R1), (R17, R19)
	SBCS	R15, R3
	SBCS	R16, R4
	SBCS	R17, R5
	SBCS	R19, R6

	LDP	128(R0), (R7, R8)
	LDP	128(R1), (R15, R16)
	LDP	144(R0), (R9, R10)
	LDP	144(R1), (R17, R19)
	SBCS	R15, R7
	SBCS	R16, R8
	SBCS	R17, R9
	SBCS	R19, R10

	LDP	160(R0), (R11, R12)
	LDP	160(R1), (R15, R16)
	LDP	176(R0), (R13, R14)
	LDP	176(R1), (R17, R19)
	SBCS	R15, R11
	SBCS	R16, R12
	SBCS	R17, R13
	SBCS	R19, R14
	SBC	ZR, ZR, R15

	// Add p751 back but anded with the mask in R15
	MOVD	·p751+0(SB), R20
	AND	R15, R20
	LDP	·p751+40(SB), (R16, R17)
	ADDS	R20, R3
	ADCS	R20, R4
	STP	(R3, R4), 96(R2)
	ADCS	R20, R5
	ADCS	R20, R6
	STP	(R5, R6), 112(R2)
	ADCS	R20, R7

	LDP	·p751+56(SB), (R19, R20)
	AND	R15, R16
	AND 	R15, R17
	ADCS	R16, R8
	STP	(R7, R8), 128(R2)
	ADCS	R17, R9

	LDP	·p751+72(SB), (R16, R17)
	AND	R15, R19
	AND	R15, R20
	ADCS	R19, R10
	STP	(R9, R10), 144(R2)
	ADCS	R20, R11

	MOVD	·p751+88(SB), R19
	AND 	R15, R16
	AND 	R15, R17
	ADCS	R16, R12
	STP	(R11, R12), 160(R2)
	ADCS	R17, R13

	AND	R15, R19
	ADC	R19, R14
	STP	(R13, R14), 176(R2)

	RET

TEXT ·fp751Mul(SB), $0-24
	MOVD	z+0(FP), R2
	MOVD	x+8(FP), R0
	MOVD	y+16(FP), R1

	LDP	0(R0), (R3, R4)
	LDP	0(R1), (R5, R6)
	MUL	R3, R5, R19
	UMULH	R3, R5, R17
	// z0 is now in R19

	// x0 * y1
	MUL	R3, R6, R13
	UMULH	R3, R6, R14

	ADDS	R17, R13, R17
	ADCS	R14, ZR, R16
	ADCS	ZR, ZR, R15

	// y0 * x1
	MUL	R5, R4, R13
	UMULH	R5, R4, R14

	// Load y2, y3
	LDP	16(R1), (R9, R10)

	ADDS	R17, R13, R17
	ADCS	R16, R14, R16
	ADCS	R15, ZR, R15

	// Store z0, z1
	STP	(R19, R17), 0(R2)

	// x0 * y2
	MUL	R3, R9, R13
	UMULH	R3, R9, R14

	// Load x2, x3
	LDP	16(R0), (R7, R8)

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	ZR, ZR, R19

	// x1 * y1
	MUL	R4, R6, R13
	UMULH	R4, R6, R14

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19

	// x2 * y0
	MUL	R7, R5, R13
	UMULH	R7, R5, R14

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19
	// z2 is now in R16

	// x0 * y3
	MUL	R3, R10, R13
	UMULH	R3, R10, R14

	ADDS	R15, R13, R15
	ADCS	R19, R14, R19
	ADCS	ZR, ZR, R17

	// x1 * y2
	MUL	R4, R9, R13
	UMULH	R4, R9, R14

	ADDS	R15, R13, R15
	ADCS	R19, R14, R19
	ADCS	R17, ZR, R17

	// x2 * y1
	MUL	R7, R6, R13
	UMULH	R7, R6, R14

	ADDS	R15, R13, R15
	ADCS	R19, R14, R19
	ADCS	R17, ZR, R17

	// x3 * y0
	MUL	R8, R5, R13
	UMULH	R8, R5, R14

	ADDS	R15, R13, R15
	ADCS	R19, R14, R19
	ADCS	R17, ZR, R17

	// Store z2, z3
	STP	(R16, R15), 16(R2)

	// x1 * y3
	MUL	R4, R10, R13
	UMULH	R4, R10, R14

	ADDS	R19, R13, R19
	ADCS	R17, R14, R17
	ADCS	ZR, ZR, R16

	// x2 * y2
	MUL	R7, R9, R13
	UMULH	R7, R9, R14

	ADDS	R19, R13, R19
	ADCS	R17, R14, R17
	ADCS	R16, ZR, R16

	// x3 * y1
	MUL	R8, R6, R13
	UMULH	R8, R6, R14

	// load x4, x5
	LDP	32(R0), (R11, R12)

	ADDS	R19, R13, R19
	ADCS	R17, R14, R17
	ADCS	R16, ZR, R16

	// x4 * y0
	MUL	R11, R5, R13
	UMULH	R11, R5, R14

	// Load y4, y5
	LDP	32(R1), (R20, R21)

	ADDS	R19, R13, R19
	ADCS	R17, R14, R17
	ADCS	R16, ZR, R16

	// x0 * y4
	MUL	R3, R20, R13
	UMULH	R3, R20, R14

	ADDS	R19, R13, R19
	ADCS	R17, R14, R17
	ADCS	R16, ZR, R16
	// z4 is now in R19

	// x0 * y5
	MUL	R3, R21, R13
	UMULH	R3, R21, R14

	ADDS	R17, R13, R17
	ADCS	R16, R14, R16
	ADCS	ZR, ZR, R15

	// x1 * y4
	MUL	R4, R20, R13
	UMULH	R4, R20, R14

	ADDS	R17, R13, R17
	ADCS	R16, R14, R16
	ADCS	R15, ZR, R15

	// x2 * y3
	MUL	R7, R10, R13
	UMULH	R7, R10, R14

	ADDS	R17, R13, R17
	ADCS	R16, R14, R16
	ADCS	R15, ZR, R15

	// x3 * y2
	MUL	R8, R9, R13
	UMULH	R8, R9, R14

	ADDS	R17, R13, R17
	ADCS	R16, R14, R16
	ADCS	R15, ZR, R15

	// x4 * y1
	MUL	R11, R6, R13
	UMULH	R11, R6, R14

	ADDS	R17, R13, R17
	ADCS	R16, R14, R16
	ADCS	R15, ZR, R15

	// x5 * y0
	MUL	R12, R5, R13
	UMULH	R12, R5, R14

	// Load x6, x7
	LDP	48(R0), (R22, R23)

	ADDS	R17, R13, R17
	ADCS	R16, R14, R16
	ADCS	R15, ZR, R15

	// Store z4, z5
	STP	(R19, R17), 32(R2)

	// x6 * y0
	MUL	R22, R5, R13
	UMULH	R22, R5, R14

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	ZR, ZR, R19

	// x5 * y1
	MUL	R12, R6, R13
	UMULH	R12, R6, R14

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19

	// x4 * y2
	MUL	R11, R9, R13
	UMULH	R11, R9, R14

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19

	// x3 * y3
	MUL	R8, R10, R13
	UMULH	R8, R10, R14

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19

	// x2 * y4
	MUL	R7, R20, R13
	UMULH	R7, R20, R14

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19

	// x1 * y5
	MUL	R4, R21, R13
	UMULH	R4, R21, R14

	// Load y6, y7
	LDP	48(R1), (R24, R25)

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19

	// x0 * y6
	MUL	R3, R24, R13
	UMULH	R3, R24, R14

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19
	// z6 is now in R16

	// x0 * y7
	MUL	R3, R25, R13
	UMULH	R3, R25, R14

	ADDS	R15, R13, R15
	ADCS	R19, R14, R19
	ADCS	ZR, ZR, R17

	// x1 * y6
	MUL	R4, R24, R13
	UMULH	R4, R24, R14

	ADDS	R15, R13, R15
	ADCS	R19, R14, R19
	ADCS	R17, ZR, R17

	// x2 * y5
	MUL	R7, R21, R13
	UMULH	R7, R21, R14

	ADDS	R15, R13, R15
	ADCS	R19, R14, R19
	ADCS	R17, ZR, R17

	// x3 * y4
	MUL	R8, R20, R13
	UMULH	R8, R20, R14

	ADDS	R15, R13, R15
	ADCS	R19, R14, R19
	ADCS	R17, ZR, R17

	// x4 * y3
	MUL	R11, R10, R13
	UMULH	R11, R10, R14

	ADDS	R15, R13, R15
	ADCS	R19, R14, R19
	ADCS	R17, ZR, R17

	// x5 * y2
	MUL	R12, R9, R13
	UMULH	R12, R9, R14

	ADDS	R15, R13, R15
	ADCS	R19, R14, R19
	ADCS	R17, ZR, R17

	// x6 * y1
	MUL	R22, R6, R13
	UMULH	R22, R6, R14

	ADDS	R15, R13, R15
	ADCS	R19, R14, R19
	ADCS	R17, ZR, R17

	// x7 * y0
	MUL	R23, R5, R13
	UMULH	R23, R5, R14

	// Load x8, x9
	LDP	64(R0), (R26, R27)

	ADDS	R15, R13, R15
	ADCS	R19, R14, R19
	ADCS	R17, ZR, R17

	// Store z6, z7
	STP	(R16, R15), 48(R2)

	// x8 * y0
	MUL	R26, R5, R13
	UMULH	R26, R5, R14

	ADDS	R19, R13, R19
	ADCS	R17, R14, R17
	ADCS	ZR, ZR, R16

	// x7 * y1
	MUL	R23, R6, R13
	UMULH	R23, R6, R14

	ADDS	R19, R13, R19
	ADCS	R17, R14, R17
	ADCS	R16, ZR, R16

	// x6 * y2
	MUL	R22, R9, R13
	UMULH	R22, R9, R14

	ADDS	R19, R13, R19
	ADCS	R17, R14, R17
	ADCS	R16, ZR, R16

	// x5 * y3
	MUL	R12, R10, R13
	UMULH	R12, R10, R14

	ADDS	R19, R13, R19
	ADCS	R17, R14, R17
	ADCS	R16, ZR, R16

	// x4 * y4
	MUL	R11, R20, R13
	UMULH	R11, R20, R14

	ADDS	R19, R13, R19
	ADCS	R17, R14, R17
	ADCS	R16, ZR, R16

	// x3 * y5
	MUL	R8, R21, R13
	UMULH	R8, R21, R14

	ADDS	R19, R13, R19
	ADCS	R17, R14, R17
	ADCS	R16, ZR, R16

	// x2 * y6
	MUL	R7, R24, R13
	UMULH	R7, R24, R14

	ADDS	R19, R13, R19
	ADCS	R17, R14, R17
	ADCS	R16, ZR, R16

	// x1 * y7
	MUL	R4, R25, R13
	UMULH	R4, R25, R14

	// Load y8, y9; unload y0
	LDP	64(R1), (R29, R5)

	ADDS	R19, R13, R19
	ADCS	R17, R14, R17
	ADCS	R16, ZR, R16

	// x0 * y8
	MUL	R3, R29, R13
	UMULH	R3, R29, R14

	ADDS	R19, R13, R19
	ADCS	R17, R14, R17
	ADCS	R16, ZR, R16
	// z8 is now in R19

	// x0 * y9
	MUL	R3, R5, R13
	UMULH	R3, R5, R14

	ADDS	R17, R13, R17
	ADCS	R16, R14, R16
	ADCS	ZR, ZR, R15

	// x1 * y8
	MUL	R4, R29, R13
	UMULH	R4, R29, R14

	ADDS	R17, R13, R17
	ADCS	R16, R14, R16
	ADCS	R15, ZR, R15

	// x2 * y7
	MUL	R7, R25, R13
	UMULH	R7, R25, R14

	ADDS	R17, R13, R17
	ADCS	R16, R14, R16
	ADCS	R15, ZR, R15

	// x3 * y6
	MUL	R8, R24, R13
	UMULH	R8, R24, R14

	ADDS	R17, R13, R17
	ADCS	R16, R14, R16
	ADCS	R15, ZR, R15

	// x4 * y5
	MUL	R11, R21, R13
	UMULH	R11, R21, R14

	ADDS	R17, R13, R17
	ADCS	R16, R14, R16
	ADCS	R15, ZR, R15

	// x5 * y4
	MUL	R12, R20, R13
	UMULH	R12, R20, R14

	ADDS	R17, R13, R17
	ADCS	R16, R14, R16
	ADCS	R15, ZR, R15

	// x6 * y3
	MUL	R22, R10, R13
	UMULH	R22, R10, R14

	ADDS	R17, R13, R17
	ADCS	R16, R14, R16
	ADCS	R15, ZR, R15

	// x7 * y2
	MUL	R23, R9, R13
	UMULH	R23, R9, R14

	ADDS	R17, R13, R17
	ADCS	R16, R14, R16
	ADCS	R15, ZR, R15

	// x8 * y1
	MUL	R26, R6, R13
	UMULH	R26, R6, R14

	// Load y0, unload x0
	MOVD	0(R1), R3

	ADDS	R17, R13, R17
	ADCS	R16, R14, R16
	ADCS	R15, ZR, R15

	// x9 * y0
	MUL	R27, R3, R13
	UMULH	R27, R3, R14

	// Load x10, unload x1
	MOVD	80(R0), R4

	ADDS	R17, R13, R17
	ADCS	R16, R14, R16
	ADCS	R15, ZR, R15

	// Store z8, z9
	STP	(R19, R17), 64(R2)

	// x10 * y0
	MUL	R4, R3, R13
	UMULH	R4, R3, R14

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	ZR, ZR, R19

	// x9 * y1
	MUL	R27, R6, R13
	UMULH	R27, R6, R14

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19

	// x8 * y2
	MUL	R26, R9, R13
	UMULH	R26, R9, R14

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19

	// x7 * y3
	MUL	R23, R10, R13
	UMULH	R23, R10, R14

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19

	// x6 * y4
	MUL	R22, R20, R13
	UMULH	R22, R20, R14

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19

	// x5 * y5
	MUL	R12, R21, R13
	UMULH	R12, R21, R14

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19

	// x4 * y6
	MUL	R11, R24, R13
	UMULH	R11, R24, R14

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19

	// x3 * y7
	MUL	R8, R25, R13
	UMULH	R8, R25, R14

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19

	// x2 * y8
	MUL	R7, R29, R13
	UMULH	R7, R29, R14

	// Load x0, x1; unload y0, y1
	LDP	0(R0), (R3, R6)

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19

	// x1 * y9
	MUL	R6, R5, R13
	UMULH	R6, R5, R14

	// Load y10, y11; unload x9, x10
	LDP	80(R1), (R27, R4)

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19

	// x0 * y10
	MUL	R3, R27, R13
	UMULH	R3, R27, R14

	ADDS	R16, R13, R16
	ADCS	R15, R14, R15
	ADCS	R19, ZR, R19
	// z10 is now in R16

	// x0 * y11
	MUL	R3, R4, R13
	UMULH	R3, R4, R14

	ADDS	R15, R13, R15
	ADCS	R19, R14, R19
	ADCS	ZR, ZR, R17

	// x1 * y10
	MUL	R6, R27, R13
	UMULH	R6, R27, R14

	ADDS	R15, R13, R15
	ADCS	R19, R14, R19
	ADCS	R17, ZR, R17

	// x2 * y9
	MUL	R7, R5, R13
	UMULH	R7, R5, R14

	ADDS	R15, R13, R15
	ADCS	R19, R14, R19
	ADCS	R17, ZR, R17

	// x3 * y8
	MUL	R8, R29, R13
	UMULH	R8, R29, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// x4 * y7
	MUL	R11, R25, R13
	UMULH	R11, R25, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// x5 * y6
	MUL	R12, R24, R13
	UMULH	R12, R24, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// x6 * y5
	MUL	R22, R21, R13
	UMULH	R22, R21, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// x7 * y4
	MUL	R23, R20, R13
	UMULH	R23, R20, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// x8 * y3
	MUL	R26, R10, R13
	UMULH	R26, R10, R14

	// Load x9, unload y9
	MOVD	72(R0), R5

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// x9 * y2
	MUL	R5, R9, R13

	// Load x10, x11; unload y10, y11
	LDP	80(R0), (R27, R4)

	UMULH	R5, R9, R14

	// Load y0, y1; unload x0, x1
	LDP	0(R1), (R3, R6)

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// x10 * y1
	MUL	R27, R6, R13
	UMULH	R27, R6, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// x11 * y0
	MUL	R4, R3, R13
	UMULH	R4, R3, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// Store z10, z11
	STP	(R16, R15), 80(R2)

	// x11 * y1
	MUL	R4, R6, R13
	UMULH	R4, R6, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, ZR, R16

	// x10 * y2
	MUL	R27, R9, R13
	UMULH	R27, R9, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16

	// x9 * y3
	MUL	R5, R10, R13
	UMULH	R5, R10, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16

	// x8 * y4
	MUL	R26, R20, R13
	UMULH	R26, R20, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16

	// x7 * y5
	MUL	R23, R21, R13
	UMULH	R23, R21, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16

	// x6 * y6
	MUL	R22, R24, R13
	UMULH	R22, R24, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16

	// x5 * y7
	MUL	R12, R25, R13
	UMULH	R12, R25, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16

	// x4 * y8
	MUL	R11, R29, R13
	UMULH	R11, R29, R14

	// Load y9, unload x9
	MOVD	72(R1), R5

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16

	// x3 * y9
	MUL	R8, R5, R13
	UMULH	R8, R5, R14

	// Load y10, y11; unload x10, x11
	LDP	80(R1), (R27, R4)

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16

	// Load x0, x1; unload y0, y1
	LDP	0(R0), (R3, R6)

	// x2 * y10
	MUL	R7, R27, R13
	UMULH	R7, R27, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16

	// x1 * y11
	MUL	R6, R4, R13
	UMULH	R6, R4, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16
	// z12 is now in R19

	// x2 * y11
	MUL	R7, R4, R13
	UMULH	R7, R4, R14

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, ZR, R15

	// x3 * y10
	MUL	R8, R27, R13
	UMULH	R8, R27, R14

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, R15, R15

	// x4 * y9
	MUL	R11, R5, R13
	UMULH	R11, R5, R14

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, R15, R15

	// x5 * y8
	MUL	R12, R29, R13
	UMULH	R12, R29, R14

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, R15, R15

	// x6 * y7
	MUL	R22, R25, R13
	UMULH	R22, R25, R14

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, R15, R15

	// x7 * y6
	MUL	R23, R24, R13
	UMULH	R23, R24, R14

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, R15, R15

	// x8 * y5
	MUL	R26, R21, R13
	UMULH	R26, R21, R14

	// Load x9, unload y9
	MOVD	72(R0), R5

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, R15, R15

	// x9 * y4
	MUL	R5, R20, R13
	UMULH	R5, R20, R14

	// Load x10, x11; unload x0, x1
	LDP	80(R0), (R3, R6)

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, R15, R15

	// x10 * y3
	MUL	R3, R10, R13
	UMULH	R3, R10, R14

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, R15, R15

	// x11 * y2
	MUL	R6, R9, R13
	UMULH	R6, R9, R14

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, R15, R15

	// Store z12, z13
	STP	(R19, R17), 96(R2)

	// x11 * y3
	MUL	R6, R10, R13
	UMULH	R6, R10, R14

	ADDS	R13, R16, R16
	ADCS	R14, R15, R15
	ADCS	ZR, ZR, R19

	// x10 * y4
	MUL	R3, R20, R13
	UMULH	R3, R20, R14

	ADDS	R13, R16, R16
	ADCS	R14, R15, R15
	ADCS	ZR, R19, R19

	// x9 * y5
	MUL	R5, R21, R13
	UMULH	R5, R21, R14

	ADDS	R13, R16, R16
	ADCS	R14, R15, R15
	ADCS	ZR, R19, R19

	// x8 * y6
	MUL	R26, R24, R13
	UMULH	R26, R24, R14

	ADDS	R13, R16, R16
	ADCS	R14, R15, R15
	ADCS	ZR, R19, R19

	// x7 * y7
	MUL	R23, R25, R13
	UMULH	R23, R25, R14

	ADDS	R13, R16, R16
	ADCS	R14, R15, R15
	ADCS	ZR, R19, R19

	// x6 * y8
	MUL	R22, R29, R13
	UMULH	R22, R29, R14

	// Load y9, unload x2
	MOVD	72(R1), R7

	ADDS	R13, R16, R16
	ADCS	R14, R15, R15
	ADCS	ZR, R19, R19

	// x5 * y9
	MUL	R12, R7, R13
	UMULH	R12, R7, R14

	ADDS	R13, R16, R16
	ADCS	R14, R15, R15
	ADCS	ZR, R19, R19

	// x4 * y10
	MUL	R11, R27, R13
	UMULH	R11, R27, R14

	ADDS	R13, R16, R16
	ADCS	R14, R15, R15
	ADCS	ZR, R19, R19

	// x3 * y11
	MUL	R8, R4, R13
	UMULH	R8, R4, R14

	ADDS	R13, R16, R16
	ADCS	R14, R15, R15
	ADCS	ZR, R19, R19
	// z14 is now in R16

	// x4 * y11
	MUL	R11, R4, R13
	UMULH	R11, R4, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, ZR, R17

	// x5 * y10
	MUL	R12, R27, R13
	UMULH	R12, R27, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// x6 * y9
	MUL	R22, R7, R13
	UMULH	R22, R7, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// x7 * y8
	MUL	R23, R29, R13
	UMULH	R23, R29, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// x8 * y7
	MUL	R26, R25, R13
	UMULH	R26, R25, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// x9 * y6
	MUL	R5, R24, R13
	UMULH	R5, R24, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// x10 * y5
	MUL	R3, R21, R13
	UMULH	R3, R21, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// x11 * y4
	MUL	R6, R20, R13
	UMULH	R6, R20, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17
	// z15 is now in R15

	// Store z14, z15
	STP	(R16, R15), 112(R2)

	// x11 * y5
	MUL	R6, R21, R13
	UMULH	R6, R21, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, ZR, R16

	// x10 * y6
	MUL	R3, R24, R13
	UMULH	R3, R24, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16

	// x9 * y7
	MUL	R5, R25, R13
	UMULH	R5, R25, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16

	// x8 * y8
	MUL	R26, R29, R13
	UMULH	R26, R29, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16

	// x7 * y9
	MUL	R23, R7, R13
	UMULH	R23, R7, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16

	// x6 * y10
	MUL	R22, R27, R13
	UMULH	R22, R27, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16

	// x5 * y11
	MUL	R12, R4, R13
	UMULH	R12, R4, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16
	// z16 is now in R19

	// x6 * y11
	MUL	R22, R4, R13
	UMULH	R22, R4, R14

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, ZR, R15

	// x7 * y10
	MUL	R23, R27, R13
	UMULH	R23, R27, R14

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, R15, R15

	// x8 * y9
	MUL	R26, R7, R13
	UMULH	R26, R7, R14

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, R15, R15

	// x9 * y8
	MUL	R5, R29, R13
	UMULH	R5, R29, R14

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, R15, R15

	// x10 * y7
	MUL	R3, R25, R13
	UMULH	R3, R25, R14

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, R15, R15

	// x11 * y6
	MUL	R6, R24, R13
	UMULH	R6, R24, R14

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, R15, R15

	// Store z16, z17
	STP	(R19, R17), 128(R2)

	// x11 * y7
	MUL	R6, R25, R13
	UMULH	R6, R25, R14

	ADDS	R13, R16, R16
	ADCS	R14, R15, R15
	ADCS	ZR, ZR, R19

	// x10 * y8
	MUL	R3, R29, R13
	UMULH	R3, R29, R14

	ADDS	R13, R16, R16
	ADCS	R14, R15, R15
	ADCS	ZR, R19, R19

	// x9 * y9
	MUL	R5, R7, R13
	UMULH	R5, R7, R14

	ADDS	R13, R16, R16
	ADCS	R14, R15, R15
	ADCS	ZR, R19, R19

	// x8 * y10
	MUL	R26, R27, R13
	UMULH	R26, R27, R14

	ADDS	R13, R16, R16
	ADCS	R14, R15, R15
	ADCS	ZR, R19, R19

	// x7 * y11
	MUL	R23, R4, R13
	UMULH	R23, R4, R14

	ADDS	R13, R16, R16
	ADCS	R14, R15, R15
	ADCS	ZR, R19, R19
	// z18 is now in R16

	// x8 * y11
	MUL	R26, R4, R13
	UMULH	R26, R4, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, ZR, R17

	// x9 * y10
	MUL	R5, R27, R13
	UMULH	R5, R27, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// x10 * y9
	MUL	R3, R7, R13
	UMULH	R3, R7, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// x11 * y8
	MUL	R6, R29, R13
	UMULH	R6, R29, R14

	ADDS	R13, R15, R15
	ADCS	R14, R19, R19
	ADCS	ZR, R17, R17

	// Store z18, z19
	STP	(R16, R15), 144(R2)

	// x11 * y9
	MUL	R6, R7, R13
	UMULH	R6, R7, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, ZR, R16

	// x10 * y10
	MUL	R3, R27, R13
	UMULH	R3, R27, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16

	// x9 * y11
	MUL	R5, R4, R13
	UMULH	R5, R4, R14

	ADDS	R13, R19, R19
	ADCS	R14, R17, R17
	ADCS	ZR, R16, R16
	// z20 is now in R19

	// x10 * y11
	MUL	R3, R4, R13
	UMULH	R3, R4, R14

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, ZR, R15

	// x11 * y10
	MUL	R6, R27, R13
	UMULH	R6, R27, R14

	ADDS	R13, R17, R17
	ADCS	R14, R16, R16
	ADCS	ZR, R15, R15

	// Store z20, z21
	STP	(R19, R17), 160(R2)

	// x11 * y11
	MUL	R6, R4, R13
	UMULH	R6, R4, R14

	ADDS	R13, R16, R16
	ADCS	R14, R15, R15

	// Store z22, z23
	STP	(R16, R15), 176(R2)

	RET

TEXT ·fp751MontgomeryReduce(SB), NOSPLIT, $0-16
	MOVD	z+0(FP), R0
	MOVD	x+8(FP), R1

	// Load p751+1 in R14-R17, R29, R19-R20, spread over arithmetic
	LDP	·p751p1+40(SB), (R14, R15)
	// z0-z11 will be R2-R13
	// Load x0-x4 to z0-z4 and x5, spread over arithmetic
	LDP	0(R1), (R2, R3)

	// x5 iteration
	MUL	R2, R14, R22
	LDP	32(R1), (R6, R21)
	UMULH	R2, R14, R23
	ADDS	R21, R22, R7	// Set z5
	ADC	ZR, R23, R25

	// x6 iteration
	MUL	R2, R15, R22
	MOVD	48(R1), R21
	UMULH	R2, R15, R23
	ADDS	R22, R25
	ADC	R23, ZR, R26

	MUL	R3, R14, R22
	LDP	·p751p1+56(SB), (R16, R17)
	UMULH	R3, R14, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, ZR, R24

	ADDS	R21, R25, R8	// Set z6
	ADCS	ZR, R26
	ADC	ZR, R24

	// x7 iteration
	MUL	R2, R16, R22
	MOVD	56(R1), R21
	UMULH	R2, R16, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, ZR, R25

	MUL	R3, R15, R22
	LDP	16(R1), (R4, R5)
	UMULH	R3, R15, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	MUL	R4, R14, R22
	LDP	·p751p1+72(SB), (R18, R19)
	UMULH	R4, R14, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	ADDS	R21, R26, R9	// Set z7
	ADCS	ZR, R24
	ADC	ZR, R25

	// x8 iteration
	MUL	R2, R17, R22
	MOVD	64(R1), R21
	UMULH	R2, R17, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, ZR, R26

	MUL	R3, R16, R22
	MOVD	·p751p1+88(SB), R20
	UMULH	R3, R16, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	MUL	R4, R15, R22
	UMULH	R4, R15, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	MUL	R5, R14, R22
	UMULH	R5, R14, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	ADDS	R24, R21, R10	// Set z8
	ADCS	ZR, R25
	ADC	ZR, R26

	// x9 iteration
	MUL	R2, R18, R22
	MOVD	72(R1), R21
	UMULH	R2, R18, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, ZR, R24

	MUL	R3, R17, R22
	UMULH	R3, R17, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	MUL	R4, R16, R22
	UMULH	R4, R16, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	MUL	R5, R15, R22
	UMULH	R5, R15, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	MUL	R6, R14, R22
	UMULH	R6, R14, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	ADDS	R21, R25, R11	// Set z9
	ADCS	ZR, R26
	ADC	ZR, R24

	// x10 iteration
	MUL	R2, R19, R22
	MOVD	80(R1), R21
	UMULH	R2, R19, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, ZR, R25

	MUL	R3, R18, R22
	UMULH	R3, R18, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	MUL	R4, R17, R22
	UMULH	R4, R17, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	MUL	R5, R16, R22
	UMULH	R5, R16, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	MUL	R6, R15, R22
	UMULH	R6, R15, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	MUL	R7, R14, R22
	UMULH	R7, R14, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	ADDS	R21, R26, R12	// Set z10
	ADCS	ZR, R24
	ADC	ZR, R25

	// x11 iteration
	MUL	R2, R20, R22
	MOVD	88(R1), R21
	UMULH	R2, R20, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, ZR, R26

	MUL	R3, R19, R22
	UMULH	R3, R19, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	MUL	R4, R18, R22
	UMULH	R4, R18, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	MUL	R5, R17, R22
	UMULH	R5, R17, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	MUL	R6, R16, R22
	UMULH	R6, R16, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	MUL	R7, R15, R22
	UMULH	R7, R15, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	MUL	R8, R14, R22
	UMULH	R8, R14, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	ADDS	R21, R24, R13	// Set z11
	ADCS	ZR, R25
	ADC	ZR, R26

	// x12 iteration
	MUL	R3, R20, R22
	MOVD	96(R1), R21
	UMULH	R3, R20, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, ZR, R24

	MUL	R4, R19, R22
	UMULH	R4, R19, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	MUL	R5, R18, R22
	UMULH	R5, R18, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	MUL	R6, R17, R22
	UMULH	R6, R17, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	MUL	R7, R16, R22
	UMULH	R7, R16, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	MUL	R8, R15, R22
	UMULH	R8, R15, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	MUL	R9, R14, R22
	UMULH	R9, R14, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	ADDS	R21, R25, R2	// Set z0
	ADCS	ZR, R26
	ADC	ZR, R24

	// x13 iteration
	MUL	R4, R20, R22
	MOVD	104(R1), R21
	UMULH	R4, R20, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, ZR, R25

	MUL	R5, R19, R22
	UMULH	R5, R19, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	MUL	R6, R18, R22
	UMULH	R6, R18, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	MUL	R7, R17, R22
	UMULH	R7, R17, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	MUL	R8, R16, R22
	UMULH	R8, R16, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	MUL	R9, R15, R22
	UMULH	R9, R15, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	MUL	R10, R14, R22
	UMULH	R10, R14, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	ADDS	R21, R26, R3	// Set z1
	STP	(R2, R3), 0(R0)
	ADCS	ZR, R24
	ADC	ZR, R25

	// x14 iteration
	MUL	R5, R20, R22
	MOVD	112(R1), R21
	UMULH	R5, R20, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, ZR, R26

	MUL	R6, R19, R22
	UMULH	R6, R19, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	MUL	R7, R18, R22
	UMULH	R7, R18, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	MUL	R8, R17, R22
	UMULH	R8, R17, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	MUL	R9, R16, R22
	UMULH	R9, R16, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	MUL	R10, R15, R22
	UMULH	R10, R15, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	MUL	R11, R14, R22
	UMULH	R11, R14, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	ADDS	R21, R24, R4	// Set z2
	ADCS	ZR, R25
	ADC	ZR, R26

	// x15 iteration
	MUL	R6, R20, R22
	MOVD	120(R1), R21
	UMULH	R6, R20, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, ZR, R24

	MUL	R7, R19, R22
	UMULH	R7, R19, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	MUL	R8, R18, R22
	UMULH	R8, R18, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	MUL	R9, R17, R22
	UMULH	R9, R17, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	MUL	R10, R16, R22
	UMULH	R10, R16, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	MUL	R11, R15, R22
	UMULH	R11, R15, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	MUL	R12, R14, R22
	UMULH	R12, R14, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	ADDS	R21, R25, R5	// Set z3
	STP	(R4, R5), 16(R0)
	ADCS	ZR, R26
	ADC	ZR, R24

	// x16 iteration
	MUL	R7, R20, R22
	MOVD	128(R1), R21
	UMULH	R7, R20, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, ZR, R25

	MUL	R8, R19, R22
	UMULH	R8, R19, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	MUL	R9, R18, R22
	UMULH	R9, R18, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	MUL	R10, R17, R22
	UMULH	R10, R17, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	MUL	R11, R16, R22
	UMULH	R11, R16, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	MUL	R12, R15, R22
	UMULH	R12, R15, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	MUL	R13, R14, R22
	UMULH	R13, R14, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	ADDS	R21, R26, R6	// Set z4
	ADCS	ZR, R24
	ADC	ZR, R25

	// x17 iteration
	MUL	R8, R20, R22
	MOVD	136(R1), R21
	UMULH	R8, R20, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, ZR, R26

	MUL	R9, R19, R22
	UMULH	R9, R19, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	MUL	R10, R18, R22
	UMULH	R10, R18, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	MUL	R11, R17, R22
	UMULH	R11, R17, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	MUL	R12, R16, R22
	UMULH	R12, R16, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	MUL	R13, R15, R22
	UMULH	R13, R15, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	ADDS	R21, R24, R7	// Set z5
	STP	(R6, R7), 32(R0)
	ADCS	ZR, R25
	ADC	ZR, R26

	// x18 iteration
	MUL	R9, R20, R22
	MOVD	144(R1), R21
	UMULH	R9, R20, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, ZR, R24

	MUL	R10, R19, R22
	UMULH	R10, R19, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	MUL	R11, R18, R22
	UMULH	R11, R18, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	MUL	R12, R17, R22
	UMULH	R12, R17, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	MUL	R13, R16, R22
	UMULH	R13, R16, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	ADDS	R21, R25, R8	// Set z6
	ADCS	ZR, R26
	ADC	ZR, R24

	// x19 iteration
	MUL	R10, R20, R22
	MOVD	152(R1), R21
	UMULH	R10, R20, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, ZR, R25

	MUL	R11, R19, R22
	UMULH	R11, R19, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	MUL	R12, R18, R22
	UMULH	R12, R18, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	MUL	R13, R17, R22
	UMULH	R13, R17, R23
	ADDS	R22, R26
	ADCS	R23, R24
	ADC	ZR, R25

	ADDS	R21, R26, R9	// Set z7
	STP	(R8, R9), 48(R0)
	ADCS	ZR, R24
	ADC	ZR, R25

	// x20 iteration
	MUL	R11, R20, R22
	MOVD	160(R1), R21
	UMULH	R11, R20, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, ZR, R26

	MUL	R12, R19, R22
	UMULH	R12, R19, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	MUL	R13, R18, R22
	UMULH	R13, R18, R23
	ADDS	R22, R24
	ADCS	R23, R25
	ADC	ZR, R26

	ADDS	R21, R24, R10	// Set z8
	ADCS	ZR, R25
	ADC	ZR, R26

	// x21 iteration
	MUL	R12, R20, R22
	MOVD	168(R1), R21
	UMULH	R12, R20, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, ZR, R24

	MUL	R13, R19, R22
	UMULH	R13, R19, R23
	ADDS	R22, R25
	ADCS	R23, R26
	ADC	ZR, R24

	ADDS	R21, R25, R11	// Set z9
	STP	(R10, R11), 64(R0)
	ADCS	ZR, R26
	ADC	ZR, R24

	// x22 iteration
	MUL	R13, R20, R22
	MOVD	176(R1), R21
	UMULH	R13, R20, R23
	ADDS	R22, R26
	ADC	R23, R24
	ADDS	R21, R26, R12	// Set z10

	MOVD	184(R1), R21
	ADC	R21, R24, R13	// Set z11
	STP	(R12, R13), 80(R0)

	RET

TEXT ·fp751StrongReduce(SB), NOSPLIT, $0-8
	MOVD	x+0(FP), R0

	// Keep x in R1-R12, p751 in R13-R21, subtract to R1-R12
	MOVD	·p751+0(SB), R13
	LDP	0(R0), (R1, R2)
	LDP	16(R0), (R3, R4)
	SUBS	R13, R1
	SBCS	R13, R2

	LDP	32(R0), (R5, R6)
	LDP	·p751+40(SB), (R14, R15)
	SBCS	R13, R3
	SBCS	R13, R4

	LDP	48(R0), (R7, R8)
	LDP	·p751+56(SB), (R16, R17)
	SBCS	R13, R5
	SBCS	R14, R6

	LDP	64(R0), (R9, R10)
	LDP	·p751+72(SB), (R19, R20)
	SBCS	R15, R7
	SBCS	R16, R8

	LDP	80(R0), (R11, R12)
	MOVD	·p751+88(SB), R21
	SBCS	R17, R9
	SBCS	R19, R10

	SBCS	R20, R11
	SBCS	R21, R12
	SBC	ZR, ZR, R22

	// Mask with the borrow and add p751
	AND	R22, R13
	AND	R22, R14
	AND	R22, R15
	AND	R22, R16
	AND	R22, R17
	AND	R22, R19
	AND	R22, R20
	AND	R22, R21

	ADDS	R13, R1
	ADCS	R13, R2
	STP 	(R1, R2), 0(R0)
	ADCS	R13, R3
	ADCS	R13, R4
	STP 	(R3, R4), 16(R0)
	ADCS	R13, R5
	ADCS	R14, R6
	STP 	(R5, R6), 32(R0)
	ADCS	R15, R7
	ADCS	R16, R8
	STP 	(R7, R8), 48(R0)
	ADCS	R17, R9
	ADCS	R19, R10
	STP 	(R9, R10), 64(R0)
	ADCS	R20, R11
	ADC	R21, R12
	STP 	(R11, R12), 80(R0)

	RET
